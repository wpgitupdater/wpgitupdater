package github

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/wpgitupdater/wpgitupdater/internal/config"
	"github.com/wpgitupdater/wpgitupdater/internal/constants"
	"github.com/wpgitupdater/wpgitupdater/internal/git"
	"github.com/wpgitupdater/wpgitupdater/internal/interfaces"
	"github.com/wpgitupdater/wpgitupdater/internal/utils"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"
)

func CreateWorkflowTemplate() {
	rand.Seed(time.Now().UnixNano())
	hour := strconv.Itoa(rand.Intn(23))
	minute := strconv.Itoa(rand.Intn(59))
	template := `name: wpgitupdater
on:
  schedule:
  - cron: ` + minute + ` ` + hour + ` * * *
  workflow_dispatch:
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - run: git checkout develop
    - run: curl ` + constants.InstallerUrl + ` | bash -s -- -b $HOME/bin
    - run: $HOME/bin/wpgitupdater update
      env:
        WP_GIT_UPDATER_TOKEN: ${{ secrets.WP_GIT_UPDATER_TOKEN }}
        WP_GIT_UPDATER_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}`

	if err := os.MkdirAll(filepath.Dir(constants.WorkflowFile), os.ModePerm); err != nil {
		log.Fatal(err)
	}
	if err := ioutil.WriteFile(constants.WorkflowFile, []byte(template), 644); err != nil {
		log.Fatal(err)
	}
	output := string(utils.RunCmd("chmod", "644", constants.WorkflowFile))
	fmt.Println(output)
}

func CreatePullRequest(cnf *config.Config, p interfaces.Plugin) error {
	var base string
	if cnf.Branch != "" {
		base = cnf.Branch
	} else {
		base = git.CurrentBranch()
	}
	body := map[string]string{
		"title": p.GetPRTitle(cnf),
		"head":  p.GetBranchName(),
		"base":  base,
		"body": `**Update Generated By:** WordPress Git Updater V` + constants.Version + `
**Build:** ` + constants.Build + `
**Build Date:** ` + constants.BuildDate + `

**Homepage:** ` + p.GetHomePage() + `
**Plugin Updated:** ` + p.GetLastUpdated() + `

**Changelog:**

` + p.GetChangelog(),
	}

	data, err := json.Marshal(body)
	if err != nil {
		return err
	}

	output := string(utils.RunCmd("git", "remote", "get-url", "origin"))
	parts := strings.Split(strings.TrimSpace(output), "github.com/")
	url := "https://api.github.com/repos/" + strings.Replace(parts[1], ".git", "", 1) + "/pulls"
	client := &http.Client{}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(data))
	if err != nil {
		return err
	}

	req.Header.Add("Authorization", "token "+cnf.Token)
	req.Header.Add("User-Agent", constants.UserAgent)
	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		return err
	}

	defer resp.Body.Close()
	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	fmt.Println(string(responseBody))

	return nil
}
